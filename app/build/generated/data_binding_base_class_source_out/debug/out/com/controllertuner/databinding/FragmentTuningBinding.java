// Generated by view binder compiler. Do not edit!
package com.controllertuner.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.controllertuner.R;
import com.google.android.material.slider.Slider;
import com.google.android.material.switchmaterial.SwitchMaterial;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentTuningBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final Slider accelerationCurveSlider;

  @NonNull
  public final TextView accelerationCurveValue;

  @NonNull
  public final LinearLayout accelerationSettingsLayout;

  @NonNull
  public final Slider accelerationThresholdSlider;

  @NonNull
  public final TextView accelerationThresholdValue;

  @NonNull
  public final SwitchMaterial enableAccelerationSwitch;

  @NonNull
  public final SwitchMaterial enableRightStickAccelerationSwitch;

  @NonNull
  public final Slider leftStickDeadZoneSlider;

  @NonNull
  public final TextView leftStickDeadZoneValue;

  @NonNull
  public final Slider leftStickSensitivitySlider;

  @NonNull
  public final TextView leftStickSensitivityValue;

  @NonNull
  public final Slider maxAccelerationSlider;

  @NonNull
  public final TextView maxAccelerationValue;

  @NonNull
  public final Slider rightStickAccelerationCurveSlider;

  @NonNull
  public final TextView rightStickAccelerationCurveValue;

  @NonNull
  public final LinearLayout rightStickAccelerationSettingsLayout;

  @NonNull
  public final Slider rightStickAccelerationThresholdSlider;

  @NonNull
  public final TextView rightStickAccelerationThresholdValue;

  @NonNull
  public final Slider rightStickDeadZoneSlider;

  @NonNull
  public final TextView rightStickDeadZoneValue;

  @NonNull
  public final Slider rightStickMaxAccelerationSlider;

  @NonNull
  public final TextView rightStickMaxAccelerationValue;

  @NonNull
  public final Slider rightStickSensitivitySlider;

  @NonNull
  public final TextView rightStickSensitivityValue;

  @NonNull
  public final Slider triggerDeadZoneSlider;

  @NonNull
  public final TextView triggerDeadZoneValue;

  @NonNull
  public final Slider triggerSensitivitySlider;

  @NonNull
  public final TextView triggerSensitivityValue;

  private FragmentTuningBinding(@NonNull ScrollView rootView,
      @NonNull Slider accelerationCurveSlider, @NonNull TextView accelerationCurveValue,
      @NonNull LinearLayout accelerationSettingsLayout, @NonNull Slider accelerationThresholdSlider,
      @NonNull TextView accelerationThresholdValue,
      @NonNull SwitchMaterial enableAccelerationSwitch,
      @NonNull SwitchMaterial enableRightStickAccelerationSwitch,
      @NonNull Slider leftStickDeadZoneSlider, @NonNull TextView leftStickDeadZoneValue,
      @NonNull Slider leftStickSensitivitySlider, @NonNull TextView leftStickSensitivityValue,
      @NonNull Slider maxAccelerationSlider, @NonNull TextView maxAccelerationValue,
      @NonNull Slider rightStickAccelerationCurveSlider,
      @NonNull TextView rightStickAccelerationCurveValue,
      @NonNull LinearLayout rightStickAccelerationSettingsLayout,
      @NonNull Slider rightStickAccelerationThresholdSlider,
      @NonNull TextView rightStickAccelerationThresholdValue,
      @NonNull Slider rightStickDeadZoneSlider, @NonNull TextView rightStickDeadZoneValue,
      @NonNull Slider rightStickMaxAccelerationSlider,
      @NonNull TextView rightStickMaxAccelerationValue, @NonNull Slider rightStickSensitivitySlider,
      @NonNull TextView rightStickSensitivityValue, @NonNull Slider triggerDeadZoneSlider,
      @NonNull TextView triggerDeadZoneValue, @NonNull Slider triggerSensitivitySlider,
      @NonNull TextView triggerSensitivityValue) {
    this.rootView = rootView;
    this.accelerationCurveSlider = accelerationCurveSlider;
    this.accelerationCurveValue = accelerationCurveValue;
    this.accelerationSettingsLayout = accelerationSettingsLayout;
    this.accelerationThresholdSlider = accelerationThresholdSlider;
    this.accelerationThresholdValue = accelerationThresholdValue;
    this.enableAccelerationSwitch = enableAccelerationSwitch;
    this.enableRightStickAccelerationSwitch = enableRightStickAccelerationSwitch;
    this.leftStickDeadZoneSlider = leftStickDeadZoneSlider;
    this.leftStickDeadZoneValue = leftStickDeadZoneValue;
    this.leftStickSensitivitySlider = leftStickSensitivitySlider;
    this.leftStickSensitivityValue = leftStickSensitivityValue;
    this.maxAccelerationSlider = maxAccelerationSlider;
    this.maxAccelerationValue = maxAccelerationValue;
    this.rightStickAccelerationCurveSlider = rightStickAccelerationCurveSlider;
    this.rightStickAccelerationCurveValue = rightStickAccelerationCurveValue;
    this.rightStickAccelerationSettingsLayout = rightStickAccelerationSettingsLayout;
    this.rightStickAccelerationThresholdSlider = rightStickAccelerationThresholdSlider;
    this.rightStickAccelerationThresholdValue = rightStickAccelerationThresholdValue;
    this.rightStickDeadZoneSlider = rightStickDeadZoneSlider;
    this.rightStickDeadZoneValue = rightStickDeadZoneValue;
    this.rightStickMaxAccelerationSlider = rightStickMaxAccelerationSlider;
    this.rightStickMaxAccelerationValue = rightStickMaxAccelerationValue;
    this.rightStickSensitivitySlider = rightStickSensitivitySlider;
    this.rightStickSensitivityValue = rightStickSensitivityValue;
    this.triggerDeadZoneSlider = triggerDeadZoneSlider;
    this.triggerDeadZoneValue = triggerDeadZoneValue;
    this.triggerSensitivitySlider = triggerSensitivitySlider;
    this.triggerSensitivityValue = triggerSensitivityValue;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentTuningBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentTuningBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_tuning, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentTuningBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.accelerationCurveSlider;
      Slider accelerationCurveSlider = ViewBindings.findChildViewById(rootView, id);
      if (accelerationCurveSlider == null) {
        break missingId;
      }

      id = R.id.accelerationCurveValue;
      TextView accelerationCurveValue = ViewBindings.findChildViewById(rootView, id);
      if (accelerationCurveValue == null) {
        break missingId;
      }

      id = R.id.accelerationSettingsLayout;
      LinearLayout accelerationSettingsLayout = ViewBindings.findChildViewById(rootView, id);
      if (accelerationSettingsLayout == null) {
        break missingId;
      }

      id = R.id.accelerationThresholdSlider;
      Slider accelerationThresholdSlider = ViewBindings.findChildViewById(rootView, id);
      if (accelerationThresholdSlider == null) {
        break missingId;
      }

      id = R.id.accelerationThresholdValue;
      TextView accelerationThresholdValue = ViewBindings.findChildViewById(rootView, id);
      if (accelerationThresholdValue == null) {
        break missingId;
      }

      id = R.id.enableAccelerationSwitch;
      SwitchMaterial enableAccelerationSwitch = ViewBindings.findChildViewById(rootView, id);
      if (enableAccelerationSwitch == null) {
        break missingId;
      }

      id = R.id.enableRightStickAccelerationSwitch;
      SwitchMaterial enableRightStickAccelerationSwitch = ViewBindings.findChildViewById(rootView, id);
      if (enableRightStickAccelerationSwitch == null) {
        break missingId;
      }

      id = R.id.leftStickDeadZoneSlider;
      Slider leftStickDeadZoneSlider = ViewBindings.findChildViewById(rootView, id);
      if (leftStickDeadZoneSlider == null) {
        break missingId;
      }

      id = R.id.leftStickDeadZoneValue;
      TextView leftStickDeadZoneValue = ViewBindings.findChildViewById(rootView, id);
      if (leftStickDeadZoneValue == null) {
        break missingId;
      }

      id = R.id.leftStickSensitivitySlider;
      Slider leftStickSensitivitySlider = ViewBindings.findChildViewById(rootView, id);
      if (leftStickSensitivitySlider == null) {
        break missingId;
      }

      id = R.id.leftStickSensitivityValue;
      TextView leftStickSensitivityValue = ViewBindings.findChildViewById(rootView, id);
      if (leftStickSensitivityValue == null) {
        break missingId;
      }

      id = R.id.maxAccelerationSlider;
      Slider maxAccelerationSlider = ViewBindings.findChildViewById(rootView, id);
      if (maxAccelerationSlider == null) {
        break missingId;
      }

      id = R.id.maxAccelerationValue;
      TextView maxAccelerationValue = ViewBindings.findChildViewById(rootView, id);
      if (maxAccelerationValue == null) {
        break missingId;
      }

      id = R.id.rightStickAccelerationCurveSlider;
      Slider rightStickAccelerationCurveSlider = ViewBindings.findChildViewById(rootView, id);
      if (rightStickAccelerationCurveSlider == null) {
        break missingId;
      }

      id = R.id.rightStickAccelerationCurveValue;
      TextView rightStickAccelerationCurveValue = ViewBindings.findChildViewById(rootView, id);
      if (rightStickAccelerationCurveValue == null) {
        break missingId;
      }

      id = R.id.rightStickAccelerationSettingsLayout;
      LinearLayout rightStickAccelerationSettingsLayout = ViewBindings.findChildViewById(rootView, id);
      if (rightStickAccelerationSettingsLayout == null) {
        break missingId;
      }

      id = R.id.rightStickAccelerationThresholdSlider;
      Slider rightStickAccelerationThresholdSlider = ViewBindings.findChildViewById(rootView, id);
      if (rightStickAccelerationThresholdSlider == null) {
        break missingId;
      }

      id = R.id.rightStickAccelerationThresholdValue;
      TextView rightStickAccelerationThresholdValue = ViewBindings.findChildViewById(rootView, id);
      if (rightStickAccelerationThresholdValue == null) {
        break missingId;
      }

      id = R.id.rightStickDeadZoneSlider;
      Slider rightStickDeadZoneSlider = ViewBindings.findChildViewById(rootView, id);
      if (rightStickDeadZoneSlider == null) {
        break missingId;
      }

      id = R.id.rightStickDeadZoneValue;
      TextView rightStickDeadZoneValue = ViewBindings.findChildViewById(rootView, id);
      if (rightStickDeadZoneValue == null) {
        break missingId;
      }

      id = R.id.rightStickMaxAccelerationSlider;
      Slider rightStickMaxAccelerationSlider = ViewBindings.findChildViewById(rootView, id);
      if (rightStickMaxAccelerationSlider == null) {
        break missingId;
      }

      id = R.id.rightStickMaxAccelerationValue;
      TextView rightStickMaxAccelerationValue = ViewBindings.findChildViewById(rootView, id);
      if (rightStickMaxAccelerationValue == null) {
        break missingId;
      }

      id = R.id.rightStickSensitivitySlider;
      Slider rightStickSensitivitySlider = ViewBindings.findChildViewById(rootView, id);
      if (rightStickSensitivitySlider == null) {
        break missingId;
      }

      id = R.id.rightStickSensitivityValue;
      TextView rightStickSensitivityValue = ViewBindings.findChildViewById(rootView, id);
      if (rightStickSensitivityValue == null) {
        break missingId;
      }

      id = R.id.triggerDeadZoneSlider;
      Slider triggerDeadZoneSlider = ViewBindings.findChildViewById(rootView, id);
      if (triggerDeadZoneSlider == null) {
        break missingId;
      }

      id = R.id.triggerDeadZoneValue;
      TextView triggerDeadZoneValue = ViewBindings.findChildViewById(rootView, id);
      if (triggerDeadZoneValue == null) {
        break missingId;
      }

      id = R.id.triggerSensitivitySlider;
      Slider triggerSensitivitySlider = ViewBindings.findChildViewById(rootView, id);
      if (triggerSensitivitySlider == null) {
        break missingId;
      }

      id = R.id.triggerSensitivityValue;
      TextView triggerSensitivityValue = ViewBindings.findChildViewById(rootView, id);
      if (triggerSensitivityValue == null) {
        break missingId;
      }

      return new FragmentTuningBinding((ScrollView) rootView, accelerationCurveSlider,
          accelerationCurveValue, accelerationSettingsLayout, accelerationThresholdSlider,
          accelerationThresholdValue, enableAccelerationSwitch, enableRightStickAccelerationSwitch,
          leftStickDeadZoneSlider, leftStickDeadZoneValue, leftStickSensitivitySlider,
          leftStickSensitivityValue, maxAccelerationSlider, maxAccelerationValue,
          rightStickAccelerationCurveSlider, rightStickAccelerationCurveValue,
          rightStickAccelerationSettingsLayout, rightStickAccelerationThresholdSlider,
          rightStickAccelerationThresholdValue, rightStickDeadZoneSlider, rightStickDeadZoneValue,
          rightStickMaxAccelerationSlider, rightStickMaxAccelerationValue,
          rightStickSensitivitySlider, rightStickSensitivityValue, triggerDeadZoneSlider,
          triggerDeadZoneValue, triggerSensitivitySlider, triggerSensitivityValue);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
